import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def calculate_characteristic_value_for_every_method(best_fitting_params, best_fitting_time_response, time_values_response):

    K_infinity = best_fitting_params[0]
    
    # Skalierung auf Einheitssprung beachten !!!
    # K_S = K_infinity / step_hight !!!

    # hier zur VEREINFACHUNG und NACHVOLLZIEHBARKEIT!!!
    K_S = K_infinity


    # t_sum
    t_sum = sum(best_fitting_params[1:])


    # calculating turning point
    first_derivative = np.gradient(best_fitting_time_response, time_values_response)
    second_derivative = np.gradient(first_derivative, time_values_response)

    zero_crossing = np.where(np.diff(np.sign(second_derivative)))[0]

    if len(zero_crossing) == 0:
        print("no turning point available")
        return None, None
    
    idx = zero_crossing[0]
    turning_point_time = time_values_response[idx]
    turning_point_value = best_fitting_time_response[idx]

    # turning point tangent
    slope = first_derivative[idx]
    y_axis_intercept = turning_point_value - slope * turning_point_time
    turning_point_tangent = slope * time_values_response + y_axis_intercept

    t_u = - y_axis_intercept / slope
    t_g = (K_S - y_axis_intercept) / slope


    # time percent
    percentages = [10, 20, 50, 80, 90]
    percentage_values = [K_S * (p / 100.0) for p in percentages]

    time_percent_values = []

    for target in percentage_values:
        number = np.argmax(np.array(best_fitting_time_response) >= target)
        time_percent_values.append(time_values_response[number])

    plt.figure(figsize=(10, 6))

    # Plot der Sprungantwort
    plt.plot(time_values_response, best_fitting_time_response, label="time response", color="blue")

    # Markiere den Endwert K_S
    plt.axhline(K_S, color='red', linestyle='--', label=f'K_S = {K_S:.2f}')

    # Markiere die Zeitpunkte t_10, t_20, t_50, t_80, t_90
    for i, percent in enumerate(percentages):
        plt.scatter(time_percent_values[i], percentage_values[i], label=f't_{percent} = {time_percent_values[i]:.2f}s', zorder=5)


    # turning point tangent
    plt.plot(time_values_response[(time_values_response >= t_u) & (time_values_response <= t_g)], turning_point_tangent[(time_values_response >= t_u) & (time_values_response <= t_g)], label='turning point tangent', linestyle='--', color='cyan')
    # turning point
    plt.scatter(turning_point_time, turning_point_value, color='cyan', zorder=5, label='turning point')


    # Markiere Verzugszeit t_u und Ausgleichszeit t_g
    plt.axvline(t_u, color='green', linestyle='--', label=f't_u = {t_u:.2f}s')
    plt.axvline(t_g, color='orange', linestyle='--', label=f't_g = {t_g:.2f}s')

    # Markiere Gesamtzeit t_sum
    plt.axvline(t_sum, color='purple', linestyle='--', label=f't_sum = {t_sum:.2f}s')

    # Labels und Titel
    plt.title("Sprungantwort und wichtige Zeitpunkte")
    plt.xlabel("time [s]")
    plt.ylabel("step response response")
    plt.legend(loc="best")
    plt.grid(True)

    # Anzeigen des Plots
    plt.tight_layout()
    plt.show()


    characteristic_values = K_S, t_sum, t_u, t_g, time_percent_values

    return characteristic_values




csv_file_path = 'data_for_pt_systems/real_pt10_response.csv'
df = pd.read_csv(csv_file_path)

time_values = df['Time'].values

best_params = [0.99524228, 1.68023653, 1.6972458,  1.71945839, 1.7457487,  1.77663613,
 1.8151402,  1.87790545, 2.00140707, 2.06927499, 1.81717192, 1.2573877,
 2.10850615, 5.63498095, 7.33786342, 7.87117181, 7.91225618, 8.00367094,
 8.90338595]

best_response_values = [0.00000000e+00, 3.72224916e-27, 6.70417060e-22, 6.83044597e-19,
 8.38046328e-17, 3.22870641e-15, 5.98587408e-14, 6.70594356e-13,
 5.20062184e-12, 3.04780712e-11, 1.43301694e-10, 5.64139050e-10,
 1.91901810e-09, 5.77726730e-09, 1.56816884e-08, 3.89485197e-08,
 8.95726070e-08, 1.92603028e-07, 3.90343211e-07, 7.50670327e-07,
 1.37766182e-06, 2.42457031e-06, 4.10901582e-06, 6.73008358e-06,
 1.06868455e-05, 1.64976801e-05, 2.48196624e-05, 3.64672389e-05,
 5.24294012e-05, 7.38846113e-05, 1.02212824e-04, 1.39004069e-04,
 1.86063199e-04, 2.45410577e-04, 3.19278606e-04, 4.10104206e-04,
 5.20517412e-04, 6.53326457e-04, 8.11499726e-04, 9.98145101e-04,
 1.21648720e-03, 1.46984308e-03, 1.76159697e-03, 2.09517447e-03,
 2.47401692e-03, 2.90155609e-03, 3.38118993e-03, 3.91625940e-03,
 4.51002688e-03, 5.16565632e-03, 5.88619526e-03, 6.67455878e-03,
 7.53351563e-03, 8.46567637e-03, 9.47348348e-03, 1.05592036e-02,
 1.17249215e-02, 1.29725362e-02, 1.43037580e-02, 1.57201083e-02,
 1.72229193e-02, 1.88133364e-02, 2.04923207e-02, 2.22606529e-02,
 2.41189381e-02, 2.60676111e-02, 2.81069426e-02, 3.02370451e-02,
 3.24578805e-02, 3.47692665e-02, 3.71708845e-02, 3.96622863e-02,
 4.22429022e-02, 4.49120480e-02, 4.76689323e-02, 5.05126641e-02,
 5.34422593e-02, 5.64566480e-02, 5.95546809e-02, 6.27351359e-02,
 6.59967241e-02, 6.93380957e-02, 7.27578459e-02, 7.62545199e-02,
 7.98266182e-02, 8.34726016e-02, 8.71908954e-02, 9.09798940e-02,
 9.48379646e-02, 9.87634517e-02, 1.02754680e-01, 1.06809957e-01,
 1.10927580e-01, 1.15105832e-01, 1.19342992e-01, 1.23637332e-01,
 1.27987123e-01, 1.32390634e-01, 1.36846136e-01, 1.41351905e-01,
 1.45906221e-01, 1.50507370e-01, 1.55153649e-01, 1.59843361e-01,
 1.64574823e-01, 1.69346362e-01, 1.74156322e-01, 1.79003055e-01,
 1.83884935e-01, 1.88800346e-01, 1.93747691e-01, 1.98725393e-01,
 2.03731888e-01, 2.08765634e-01, 2.13825107e-01, 2.18908802e-01,
 2.24015236e-01, 2.29142945e-01, 2.34290484e-01, 2.39456433e-01,
 2.44639389e-01, 2.49837975e-01, 2.55050831e-01, 2.60276622e-01,
 2.65514036e-01, 2.70761780e-01, 2.76018586e-01, 2.81283207e-01,
 2.86554419e-01, 2.91831021e-01, 2.97111834e-01, 3.02395702e-01,
 3.07681492e-01, 3.12968092e-01, 3.18254413e-01, 3.23539391e-01,
 3.28821982e-01, 3.34101164e-01, 3.39375940e-01, 3.44645332e-01,
 3.49908386e-01, 3.55164171e-01, 3.60411774e-01, 3.65650309e-01,
 3.70878908e-01, 3.76096724e-01, 3.81302934e-01, 3.86496734e-01,
 3.91677343e-01, 3.96843998e-01, 4.01995958e-01, 4.07132504e-01,
 4.12252934e-01, 4.17356568e-01, 4.22442745e-01, 4.27510825e-01,
 4.32560185e-01, 4.37590223e-01, 4.42600355e-01, 4.47590016e-01,
 4.52558658e-01, 4.57505754e-01, 4.62430793e-01, 4.67333281e-01,
 4.72212743e-01, 4.77068720e-01, 4.81900771e-01, 4.86708470e-01,
 4.91491410e-01, 4.96249198e-01, 5.00981458e-01, 5.05687828e-01,
 5.10367963e-01, 5.15021532e-01, 5.19648221e-01, 5.24247728e-01,
 5.28819766e-01, 5.33364062e-01, 5.37880359e-01, 5.42368410e-01,
 5.46827983e-01, 5.51258859e-01, 5.55660832e-01, 5.60033708e-01,
 5.64377305e-01, 5.68691454e-01, 5.72975996e-01, 5.77230786e-01,
 5.81455688e-01, 5.85650577e-01, 5.89815339e-01, 5.93949873e-01,
 5.98054085e-01, 6.02127891e-01, 6.06171219e-01, 6.10184005e-01,
 6.14166195e-01, 6.18117743e-01, 6.22038613e-01, 6.25928777e-01,
 6.29788216e-01, 6.33616917e-01, 6.37414878e-01, 6.41182102e-01,
 6.44918602e-01, 6.48624396e-01, 6.52299512e-01, 6.55943980e-01,
 6.59557843e-01, 6.63141145e-01, 6.66693939e-01, 6.70216283e-01,
 6.73708244e-01, 6.77169889e-01, 6.80601296e-01, 6.84002546e-01,
 6.87373724e-01, 6.90714923e-01, 6.94026239e-01, 6.97307773e-01,
 7.00559629e-01, 7.03781919e-01, 7.06974755e-01, 7.10138257e-01,
 7.13272546e-01, 7.16377749e-01, 7.19453994e-01, 7.22501414e-01,
 7.25520146e-01, 7.28510329e-01, 7.31472105e-01, 7.34405620e-01,
 7.37311023e-01, 7.40188464e-01, 7.43038096e-01, 7.45860076e-01,
 7.48654561e-01, 7.51421712e-01, 7.54161693e-01, 7.56874666e-01,
 7.59560799e-01, 7.62220260e-01, 7.64853219e-01, 7.67459846e-01,
 7.70040316e-01, 7.72594803e-01, 7.75123481e-01, 7.77626529e-01,
 7.80104124e-01, 7.82556444e-01, 7.84983671e-01, 7.87385985e-01,
 7.89763568e-01, 7.92116601e-01, 7.94445269e-01, 7.96749754e-01,
 7.99030242e-01, 8.01286916e-01, 8.03519962e-01, 8.05729565e-01,
 8.07915911e-01, 8.10079185e-01, 8.12219574e-01, 8.14337263e-01,
 8.16432438e-01, 8.18505286e-01, 8.20555993e-01, 8.22584744e-01,
 8.24591725e-01, 8.26577122e-01, 8.28541120e-01, 8.30483903e-01,
 8.32405657e-01, 8.34306565e-01, 8.36186812e-01, 8.38046580e-01,
 8.39886052e-01, 8.41705411e-01, 8.43504839e-01, 8.45284516e-01,
 8.47044623e-01, 8.48785340e-01, 8.50506846e-01, 8.52209320e-01,
 8.53892939e-01, 8.55557880e-01, 8.57204319e-01, 8.58832432e-01,
 8.60442393e-01, 8.62034376e-01, 8.63608554e-01, 8.65165098e-01,
 8.66704179e-01, 8.68225968e-01, 8.69730634e-01, 8.71218344e-01,
 8.72689265e-01, 8.74143565e-01, 8.75581408e-01, 8.77002958e-01,
 8.78408378e-01, 8.79797831e-01, 8.81171477e-01, 8.82529476e-01,
 8.83871988e-01, 8.85199169e-01, 8.86511176e-01, 8.87808166e-01,
 8.89090292e-01, 8.90357708e-01, 8.91610567e-01, 8.92849018e-01,
 8.94073213e-01, 8.95283300e-01, 8.96479427e-01, 8.97661740e-01,
 8.98830385e-01, 8.99985506e-01, 9.01127246e-01, 9.02255748e-01,
 9.03371152e-01, 9.04473597e-01, 9.05563223e-01, 9.06640167e-01,
 9.07704565e-01, 9.08756552e-01, 9.09796261e-01, 9.10823827e-01,
 9.11839380e-01, 9.12843051e-01, 9.13834969e-01, 9.14815263e-01,
 9.15784059e-01, 9.16741484e-01, 9.17687662e-01, 9.18622718e-01,
 9.19546772e-01, 9.20459948e-01, 9.21362365e-01, 9.22254142e-01,
 9.23135398e-01, 9.24006249e-01, 9.24866812e-01, 9.25717201e-01,
 9.26557529e-01, 9.27387910e-01, 9.28208455e-01, 9.29019275e-01,
 9.29820478e-01, 9.30612173e-01, 9.31394467e-01, 9.32167466e-01,
 9.32931277e-01, 9.33686002e-01, 9.34431744e-01, 9.35168607e-01,
 9.35896690e-01, 9.36616094e-01, 9.37326918e-01, 9.38029260e-01,
 9.38723216e-01, 9.39408883e-01, 9.40086356e-01, 9.40755729e-01,
 9.41417094e-01, 9.42070545e-01, 9.42716171e-01, 9.43354064e-01,
 9.43984313e-01, 9.44607006e-01, 9.45222229e-01, 9.45830071e-01,
 9.46430616e-01, 9.47023949e-01, 9.47610154e-01, 9.48189314e-01,
 9.48761510e-01, 9.49326824e-01, 9.49885336e-01, 9.50437125e-01,
 9.50982271e-01, 9.51520850e-01, 9.52052939e-01, 9.52578615e-01,
 9.53097952e-01, 9.53611026e-01, 9.54117909e-01, 9.54618674e-01,
 9.55113394e-01, 9.55602139e-01, 9.56084979e-01, 9.56561985e-01,
 9.57033225e-01, 9.57498768e-01, 9.57958679e-01, 9.58413027e-01,
 9.58861877e-01, 9.59305294e-01, 9.59743342e-01, 9.60176085e-01,
 9.60603586e-01, 9.61025908e-01, 9.61443110e-01, 9.61855256e-01,
 9.62262403e-01, 9.62664613e-01, 9.63061944e-01, 9.63454454e-01,
 9.63842200e-01, 9.64225240e-01, 9.64603628e-01, 9.64977422e-01,
 9.65346676e-01, 9.65711443e-01, 9.66071779e-01, 9.66427735e-01,
 9.66779364e-01, 9.67126718e-01, 9.67469849e-01, 9.67808806e-01,
 9.68143640e-01, 9.68474400e-01, 9.68801136e-01, 9.69123895e-01,
 9.69442725e-01, 9.69757674e-01, 9.70068789e-01, 9.70376114e-01,
 9.70679697e-01, 9.70979581e-01, 9.71275812e-01, 9.71568434e-01,
 9.71857490e-01, 9.72143022e-01, 9.72425075e-01, 9.72703689e-01,
 9.72978905e-01, 9.73250766e-01, 9.73519312e-01, 9.73784582e-01,
 9.74046616e-01, 9.74305454e-01, 9.74561134e-01, 9.74813694e-01,
 9.75063172e-01, 9.75309605e-01, 9.75553030e-01, 9.75793484e-01,
 9.76031003e-01, 9.76265622e-01, 9.76497376e-01, 9.76726300e-01,
 9.76952429e-01, 9.77175795e-01, 9.77396434e-01, 9.77614378e-01,
 9.77829659e-01, 9.78042310e-01, 9.78252363e-01, 9.78459850e-01,
 9.78664801e-01, 9.78867248e-01, 9.79067221e-01, 9.79264750e-01,
 9.79459864e-01, 9.79652594e-01, 9.79842968e-01, 9.80031015e-01,
 9.80216763e-01, 9.80400240e-01, 9.80581474e-01, 9.80760492e-01,
 9.80937321e-01, 9.81111988e-01, 9.81284519e-01, 9.81454940e-01,
 9.81623278e-01, 9.81789556e-01, 9.81953801e-01, 9.82116037e-01,
 9.82276289e-01, 9.82434581e-01, 9.82590937e-01, 9.82745380e-01,
 9.82897934e-01, 9.83048622e-01, 9.83197467e-01, 9.83344490e-01,
 9.83489716e-01, 9.83633164e-01, 9.83774858e-01, 9.83914818e-01,
 9.84053066e-01, 9.84189623e-01, 9.84324509e-01, 9.84457744e-01,
 9.84589350e-01, 9.84719345e-01, 9.84847750e-01, 9.84974583e-01]


calculate_characteristic_value_for_every_method(best_params, best_response_values, time_values)
